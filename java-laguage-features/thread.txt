Thread是通过线程对象来执行与其他线程隔离的执行单元
Thread t = new Thread(r);
Thread t = new Thread(r,threadName);
检查线程状态：t.isAlive();
线程优先级：t.getPriority();
    修改线程优先级别可能导致在不同的操作系统中应用的优先级改变
线程状态为一个枚举类：
    java.lang.Thread.State：
    NEW: A thread that has not yet started is in this state.
    RUNNABLE: A thread executing in the JVM is in this state.
    BLOCKED: A thread that is blocked waiting for a monitor lock is in this state.
    WAITING: A thread that is waiting indefinitely for another thread to
            perform a particular action is in this state.
    TIMED_WAITING: A thread that is waiting for another thread to
            perform an action for up to a specified waiting time is in this state.
    TERMINATED: A thread that has exited is in this state
如果CPU有足够的资源多个线程可以并发执行，如果资源不够，线程就只能使用共享资源（core）
操作系统定时检测等待执行的线程：
    • Linux 2.6  Scheduler (http://en.wikipedia.org/wiki/O(1)_scheduler).
    • Linux 2.6.23  Scheduler (http://en.wikipedia.org/wiki/Completely_Fair_Scheduler), which is the default scheduler.
    • Windows Scheduler (http://en.wikipedia.org/wiki/Multilevel_feedback_queue).
守护线程（Daemon）：isDaemon() ; setDaemon();
    是一个非守护线程的助手，在应用程序的最后一个非守护线程终止时自动终止，以便应用程序可以终止
非守护线程（nonDaemon）：
    一般创建的线程都是非守护线程
程序的主线程终止以后，程序不会终止，直到所有的非守护线程都终止。如果后台线程是守护线程，那么主线程终止，应用程序马上终止
interrupt(),Thread static interrupted(),isInterrupted()
线程之间的交互：
    void join()
    无限期地等待这个线程的死亡。当任何线程中断当前线程时，将抛出中断的异常。如果抛出此异常，则将清除中断状态。
    在当前线程调用另一个线程对象的join(),当前线程就可以获取另一个线程执行完成后的数据（也就是说当前线程会监控join线程的状态）
    void join(long millis)
    void join(long millis,int nanos)

